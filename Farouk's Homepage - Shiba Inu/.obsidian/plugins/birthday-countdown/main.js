/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => MyPlugin
});
var import_obsidian = __toModule(require("obsidian"));
var DEFAULT_SETTINGS = {
  remindMe: 7
};
var MyPlugin = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.addCommand({
        id: "create-countdown-in-current-file",
        name: "Create Countdown in Current File",
        editorCallback: (editor, view) => {
          const files = app.vault.getMarkdownFiles();
          console.log(editor.getSelection());
          editor.replaceSelection(`<p class="stickies";><b>COUNTDOWN</b><br>`);
          let count = 0;
          let remindMeIn = this.settings.remindMe;
          for (var ita = 0; ita < files.length; ita++) {
            let today = new Date();
            let year = today.getFullYear();
            let yearString = year.toString();
            const basename = files[ita].basename;
            const meta = this.app.metadataCache.getFileCache(files[ita]).frontmatter;
            if (typeof meta != "undefined") {
              const birthday = this.app.metadataCache.getFileCache(files[ita]).frontmatter.birthday;
              if (birthday) {
                let birthdaySlice = birthday.slice(4);
                let nextBirthdayString = yearString + birthdaySlice;
                let nextBirthdayNumber = new Date(nextBirthdayString);
                let diffBetween = Math.floor((nextBirthdayNumber - today) / 36e5 / 24);
                let N = 0;
                diffBetween > 0 ? N = diffBetween : N = diffBetween + 365;
                if (N < remindMeIn) {
                  count = count + 1;
                  console.log(editor.getSelection());
                  editor.replaceSelection(`${basename}\u751F\u65E5\u8FD8\u6709${N}\u5929!<br>`);
                }
              }
            }
          }
          if (count == 0) {
            console.log(editor.getSelection());
            editor.replaceSelection(`\u6700\u8FD1${remindMeIn}\u5929\u6CA1\u6709\u751F\u65E5!`);
          }
          editor.replaceSelection(`<!-- --- --></p><br>`);
        }
      });
      this.addSettingTab(new SampleSettingTab(this.app, this));
      this.registerDomEvent(document, "click", (evt) => {
        console.log("click", evt);
      });
      this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
    });
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for my awesome plugin." });
    new import_obsidian.Setting(containerEl).setName("\u63D0\u9192\u8303\u56F4\u8BBE\u5728\u51E0\u5929\u4E4B\u5185\uFF1F").setDesc("\u4F60\u53EF\u4EE5\u9009\u62E93\u5929\uFF0C7\u5929\uFF0C365\u5929\u2026\u2026").addText((text) => text.setPlaceholder("\u8F93\u5165\u4E00\u4E2A\u6570\u5B57").setValue(this.plugin.settings.remindMe).onChange((value) => __async(this, null, function* () {
      console.log("\u63D0\u9192\u5929\u6570 " + value);
      this.plugin.settings.remindMe = value;
      yield this.plugin.saveSettings();
    })));
  }
};
//# sourceMappingURL=data:application/json;base64,
